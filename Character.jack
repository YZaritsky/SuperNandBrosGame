class Character {
    field int state; // 0 - standing, 1 - running, 2 - jumping
    field int inAir;  // 0 - on ground, 1 - in air
    field int runningPhase; // for running animatiion.
    field int location; 
    field int onScreenLocation;
    field int velocity;
    field int gravityConstant;
    field int jumpingVelocityConstant;
    
    constructor Character new(int _groundHeight) {
        let gravityConstant = 5;
        let jumpingVelocityConstant = 15;
        let state = 0; // Initialize state to standing
        let runningPhase = 0;
        let velocity = 0;
        let location = _groundHeight; 
        let onScreenLocation = getLocationOnScreen();
        return this;
    }

    method int getLocationOnScreen() {
        return (32 * location) + 2;
    }

    method int getCorrentHeight() {
        return location;
    }

    /**
     * @param action  0 - standing, 1 - running, 2 - jumping
     */
    method void render(int action, int groundHeight) {

        if (action = 2) {
            if (inAir = 0) { // perform jump
                let inAir = 1;
                let velocity = -jumpingVelocityConstant;
            } else {
                let velocity = velocity + gravityConstant;
            }
        } else {
            let velocity = velocity + gravityConstant;
        }

        if (inAir = 1) {
            let action = 2;  // effects only the rendering of character
        }

        let location = location + velocity;

        if (groundHeight < (location + 16)) {// reached the ground
            let location = groundHeight - 17; // re-set location to avoid overflow when standing
            let velocity = 0; // (velocity will keep decreasing)
            let inAir = 0;
        }

        let onScreenLocation = getLocationOnScreen();
    
        // render player according to the current state
        if (action = 0) {
            do stand();
        } else {
            if (action = 1) {
                do run();
            } else {
                do jump();
            }   
        }

        return;
    }


    
    method void jump() {
        var int memAddress; 
        let memAddress = 16384+onScreenLocation;
        // column 0
        do Memory.poke(memAddress, -8192);
        do Memory.poke(memAddress +32, -6208);
        do Memory.poke(memAddress +64, -32);
        do Memory.poke(memAddress +96, -31520);
        do Memory.poke(memAddress +128, -19376);
        do Memory.poke(memAddress +160, 18640);
        do Memory.poke(memAddress +192, 15408);
        do Memory.poke(memAddress +224, 6208);
        do Memory.poke(memAddress +256, 4604);
        do Memory.poke(memAddress +288, -28670);
        do Memory.poke(memAddress +320, -25541);
        do Memory.poke(memAddress +352, -8121);
        do Memory.poke(memAddress +384, -16374);
        do Memory.poke(memAddress +416, -2020);
        do Memory.poke(memAddress +448, 1806);
        do Memory.poke(memAddress +480, 242);
        return;
    }

    method void runAnimation1() {	
        var int memAddress; 
	    let memAddress = 16384+onScreenLocation;
        // column 0
        do Memory.poke(memAddress, 992);
        do Memory.poke(memAddress +32, 8176);
        do Memory.poke(memAddress +64, 624);
        do Memory.poke(memAddress +96, 6696);
        do Memory.poke(memAddress +128, 9320);
        do Memory.poke(memAddress +160, 7704);
        do Memory.poke(memAddress +192, 3104);
        do Memory.poke(memAddress +224, 636);
        do Memory.poke(memAddress +256, 31755);
        do Memory.poke(memAddress +288, 24599);
        do Memory.poke(memAddress +320, 9235);
        do Memory.poke(memAddress +352, 14344);
        do Memory.poke(memAddress +384, 12740);
        do Memory.poke(memAddress +416, 15934);
        do Memory.poke(memAddress +448, 14);
        do Memory.poke(memAddress +480, 28);
        return;
    }
  
    method void runAnimation2() {	
        var int memAddress; 
	    let memAddress = 16384+onScreenLocation;
        // column 0
        do Memory.poke(memAddress, 992);
        do Memory.poke(memAddress +32, 8176);
        do Memory.poke(memAddress +64, 624);
        do Memory.poke(memAddress +96, 6696);
        do Memory.poke(memAddress +128, 9320);
        do Memory.poke(memAddress +160, 7704);
        do Memory.poke(memAddress +192, 3104);
        do Memory.poke(memAddress +224, 624);
        do Memory.poke(memAddress +256, 1032);
        do Memory.poke(memAddress +288, 2056);
        do Memory.poke(memAddress +320, 2056);
        do Memory.poke(memAddress +352, 2504);
        do Memory.poke(memAddress +384, 1232);
        do Memory.poke(memAddress +416, 1824);
        do Memory.poke(memAddress +448, 4064);
        do Memory.poke(memAddress +480, 480);
        return;
    }

    method void runAnimation3() {
        var int memAddress; 
        let memAddress = 16384+onScreenLocation;
        // column 0
        do Memory.poke(memAddress, 0);
        do Memory.poke(memAddress +32, 1984);
        do Memory.poke(memAddress +64, 16352);
        do Memory.poke(memAddress +96, 1248);
        do Memory.poke(memAddress +128, 13392);
        do Memory.poke(memAddress +160, 18640);
        do Memory.poke(memAddress +192, 15408);
        do Memory.poke(memAddress +224, 6208);
        do Memory.poke(memAddress +256, 4576);
        do Memory.poke(memAddress +288, 14352);
        do Memory.poke(memAddress +320, 6168);
        do Memory.poke(memAddress +352, 2072);
        do Memory.poke(memAddress +384, 2056);
        do Memory.poke(memAddress +416, 1148);
        do Memory.poke(memAddress +448, 900);
        do Memory.poke(memAddress +480, 1920);
        return;
    }

    method void run() {
        if (runningPhase = 0) {
            do runAnimation1(); 
            let runningPhase = 1;
        } 
        else {
            if (runningPhase = 1) {
                do runAnimation2(); 
                let runningPhase = 2;
            } 
            else {
                if (runningPhase = 2) {
                    do runAnimation3(); 
                    let runningPhase = 0;
                }
            }
        }
        return;
    }

    method void stand() {
        var int memAddress; 
        let memAddress = 16384+onScreenLocation;
        // column 0
        do Memory.poke(memAddress, 992);
        do Memory.poke(memAddress +32, 8176);
        do Memory.poke(memAddress +64, 624);
        do Memory.poke(memAddress +96, 6696);
        do Memory.poke(memAddress +128, 9320);
        do Memory.poke(memAddress +160, 7704);
        do Memory.poke(memAddress +192, 3104);
        do Memory.poke(memAddress +224, 1008);
        do Memory.poke(memAddress +256, 7176);
        do Memory.poke(memAddress +288, 8196);
        do Memory.poke(memAddress +320, 10260);
        do Memory.poke(memAddress +352, 9252);
        do Memory.poke(memAddress +384, 14748);
        do Memory.poke(memAddress +416, 1648);
        do Memory.poke(memAddress +448, 7224);
        do Memory.poke(memAddress +480, 15420);
        return;
    }

    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }
}